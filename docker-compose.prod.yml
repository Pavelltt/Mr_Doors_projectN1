version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mrdoors_postgres
    environment:
      POSTGRES_DB: mrdoors
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "127.0.0.1:5432:5432"  # Bind only to localhost for security
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mrdoors_network
    restart: unless-stopped

  # Backend API Service
  backend:
    build:
      context: ./analytics_service/backend
      dockerfile: Dockerfile
    container_name: mrdoors_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/mrdoors
      - CORS_ORIGINS=${CORS_ORIGINS:-https://yourdomain.com}
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mrdoors_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend Service
  frontend:
    build:
      context: ./analytics-dashboard
      dockerfile: Dockerfile
    container_name: mrdoors_frontend
    expose:
      - "80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mrdoors_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Telegram Bot Service
  telegram_bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mrdoors_bot
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_VISION_MODEL=${OPENAI_VISION_MODEL:-gpt-4o}
      - OPENAI_TIMEOUT=${OPENAI_TIMEOUT:-45}
      - OPENAI_RETRIES=${OPENAI_RETRIES:-2}
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/mrdoors
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ANALYTICS_API_URL=http://backend:8000
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - mrdoors_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mrdoors_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot_www:/var/www/certbot:ro
      - certbot_conf:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    networks:
      - mrdoors_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: mrdoors_certbot
    volumes:
      - certbot_www:/var/www/certbot:rw
      - certbot_conf:/etc/letsencrypt:rw
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}
    profiles:
      - ssl

volumes:
  postgres_data:
    driver: local
  certbot_www:
    driver: local
  certbot_conf:
    driver: local

networks:
  mrdoors_network:
    driver: bridge